package extensions.google.googlemerchantback;

import com.google.api.services.content.ShoppingContent;
import com.google.api.services.content.ShoppingContentRequest;
import com.google.api.services.content.ShoppingContentRequestInitializer;
import com.google.api.services.content.model.Inventory;

/*
 * Copyright 2010 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-08-03 17:34:38 UTC)
 * on 2015-10-09 at 11:32:13 UTC 
 * Modify at your own risk.
 */

@SuppressWarnings("javadoc")
public class ShoppingContentBack extends AbstractGoogleJsonClientBack {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the Content API for Shopping library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "content/v2/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ShoppingContentBack(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ShoppingContentBack(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(AbstractGoogleClientRequestBack<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Accounts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Accounts.List request = content.accounts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  /*public Accounts accounts() {
    return new Accounts();
  }*/

  /**
   * The "accounts" collection of methods.
   */
 /* public class Accounts {

    *//**
     * Returns information about the authenticated user.
     *
     * Create a request for the method "accounts.authinfo".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Authinfo#execute()} method to invoke the remote operation.
     *
     * @return the request
     *//*
    public Authinfo authinfo() throws java.io.IOException {
      Authinfo result = new Authinfo();
      initialize(result);
      return result;
    }

    public class Authinfo extends ShoppingContentRequest<com.google.api.services.content.model.AccountsAuthInfoResponse> {

      private static final String REST_PATH = "accounts/authinfo";

      *//**
       * Returns information about the authenticated user.
       *
       * Create a request for the method "accounts.authinfo".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Authinfo#execute()} method to invoke the remote operation. <p>
       * {@link
       * Authinfo#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       *//*
      protected Authinfo() {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountsAuthInfoResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Authinfo setAlt(java.lang.String alt) {
        return (Authinfo) super.setAlt(alt);
      }

      @Override
      public Authinfo setFields(java.lang.String fields) {
        return (Authinfo) super.setFields(fields);
      }

      @Override
      public Authinfo setKey(java.lang.String key) {
        return (Authinfo) super.setKey(key);
      }

      @Override
      public Authinfo setOauthToken(java.lang.String oauthToken) {
        return (Authinfo) super.setOauthToken(oauthToken);
      }

      @Override
      public Authinfo setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Authinfo) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Authinfo setQuotaUser(java.lang.String quotaUser) {
        return (Authinfo) super.setQuotaUser(quotaUser);
      }

      @Override
      public Authinfo setUserIp(java.lang.String userIp) {
        return (Authinfo) super.setUserIp(userIp);
      }

      @Override
      public Authinfo set(String parameterName, Object value) {
        return (Authinfo) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single
     * request.
     *
     * Create a request for the method "accounts.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.AccountsCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.AccountsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.AccountsCustomBatchResponse> {

      private static final String REST_PATH = "accounts/batch";

      *//**
       * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single
       * request.
       *
       * Create a request for the method "accounts.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.AccountsCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.AccountsCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountsCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Custombatch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Deletes a Merchant Center sub-account.
     *
     * Create a request for the method "accounts.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account.
     * @return the request
     *//*
    public Delete delete(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Delete result = new Delete(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "{merchantId}/accounts/{accountId}";

      *//**
       * Deletes a Merchant Center sub-account.
       *
       * Create a request for the method "accounts.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account.
       * @since 1.13
       *//*
      protected Delete(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContentBack.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account. *//*
      public Delete setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Delete setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves a Merchant Center account.
     *
     * Create a request for the method "accounts.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account.
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Account> {

      private static final String REST_PATH = "{merchantId}/accounts/{accountId}";

      *//**
       * Retrieves a Merchant Center account.
       *
       * Create a request for the method "accounts.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account.
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.Account.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account. *//*
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Creates a Merchant Center sub-account.
     *
     * Create a request for the method "accounts.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param content the {@link com.google.api.services.content.model.Account}
     * @return the request
     *//*
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Account content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.Account> {

      private static final String REST_PATH = "{merchantId}/accounts";

      *//**
       * Creates a Merchant Center sub-account.
       *
       * Create a request for the method "accounts.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param content the {@link com.google.api.services.content.model.Account}
       * @since 1.13
       *//*
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Account content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.Account.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getName(), "Account.getName()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Insert setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "accounts.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.AccountsListResponse> {

      private static final String REST_PATH = "{merchantId}/accounts";

      *//**
       * Lists the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "accounts.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** The maximum number of accounts to return in the response, used for paging. *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of accounts to return in the response, used for paging.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//** The maximum number of accounts to return in the response, used for paging. *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    *//**
     * Updates a Merchant Center account. This method supports patch semantics.
     *
     * Create a request for the method "accounts.patch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account.
     * @param content the {@link com.google.api.services.content.model.Account}
     * @return the request
     *//*
    public Patch patch(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.Account content) throws java.io.IOException {
      Patch result = new Patch(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Patch extends ShoppingContentRequest<com.google.api.services.content.model.Account> {

      private static final String REST_PATH = "{merchantId}/accounts/{accountId}";

      *//**
       * Updates a Merchant Center account. This method supports patch semantics.
       *
       * Create a request for the method "accounts.patch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account.
       * @param content the {@link com.google.api.services.content.model.Account}
       * @since 1.13
       *//*
      protected Patch(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.Account content) {
        super(ShoppingContentBack.this, "PATCH", REST_PATH, content, com.google.api.services.content.model.Account.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Patch setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account. *//*
      public Patch setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Patch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    *//**
     * Updates a Merchant Center account.
     *
     * Create a request for the method "accounts.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account.
     * @param content the {@link com.google.api.services.content.model.Account}
     * @return the request
     *//*
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.Account content) throws java.io.IOException {
      Update result = new Update(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.Account> {

      private static final String REST_PATH = "{merchantId}/accounts/{accountId}";

      *//**
       * Updates a Merchant Center account.
       *
       * Create a request for the method "accounts.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account.
       * @param content the {@link com.google.api.services.content.model.Account}
       * @since 1.13
       *//*
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.Account content) {
        super(ShoppingContentBack.this, "PUT", REST_PATH, content, com.google.api.services.content.model.Account.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getId(), "Account.getId()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getName(), "Account.getName()");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account. *//*
      public Update setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Update setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * An accessor for creating requests from the Accountshipping collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Accountshipping.List request = content.accountshipping().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  /*public Accountshipping accountshipping() {
    return new Accountshipping();
  }*/

  /**
   * The "accountshipping" collection of methods.
   */
  /*public class Accountshipping {

    *//**
     * Retrieves and updates the shipping settings of multiple accounts in a single request.
     *
     * Create a request for the method "accountshipping.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.AccountshippingCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.AccountshippingCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.AccountshippingCustomBatchResponse> {

      private static final String REST_PATH = "accountshipping/batch";

      *//**
       * Retrieves and updates the shipping settings of multiple accounts in a single request.
       *
       * Create a request for the method "accountshipping.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.AccountshippingCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.AccountshippingCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountshippingCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Custombatch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves the shipping settings of the account.
     *
     * Create a request for the method "accountshipping.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account for which to get/update account shipping settings.
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.AccountShipping> {

      private static final String REST_PATH = "{merchantId}/accountshipping/{accountId}";

      *//**
       * Retrieves the shipping settings of the account.
       *
       * Create a request for the method "accountshipping.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account for which to get/update account shipping settings.
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountShipping.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account for which to get/update account shipping settings. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account for which to get/update account shipping settings.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account for which to get/update account shipping settings. *//*
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the shipping settings of the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "accountshipping.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.AccountshippingListResponse> {

      private static final String REST_PATH = "{merchantId}/accountshipping";

      *//**
       * Lists the shipping settings of the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "accountshipping.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountshippingListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** The maximum number of shipping settings to return in the response, used for paging. *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of shipping settings to return in the response, used for paging.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//** The maximum number of shipping settings to return in the response, used for paging. *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    *//**
     * Updates the shipping settings of the account. This method supports patch semantics.
     *
     * Create a request for the method "accountshipping.patch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account for which to get/update account shipping settings.
     * @param content the {@link com.google.api.services.content.model.AccountShipping}
     * @return the request
     *//*
    public Patch patch(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountShipping content) throws java.io.IOException {
      Patch result = new Patch(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Patch extends ShoppingContentRequest<com.google.api.services.content.model.AccountShipping> {

      private static final String REST_PATH = "{merchantId}/accountshipping/{accountId}";

      *//**
       * Updates the shipping settings of the account. This method supports patch semantics.
       *
       * Create a request for the method "accountshipping.patch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account for which to get/update account shipping settings.
       * @param content the {@link com.google.api.services.content.model.AccountShipping}
       * @since 1.13
       *//*
      protected Patch(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountShipping content) {
        super(ShoppingContentBack.this, "PATCH", REST_PATH, content, com.google.api.services.content.model.AccountShipping.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Patch setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account for which to get/update account shipping settings. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account for which to get/update account shipping settings.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account for which to get/update account shipping settings. *//*
      public Patch setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Patch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    *//**
     * Updates the shipping settings of the account.
     *
     * Create a request for the method "accountshipping.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account for which to get/update account shipping settings.
     * @param content the {@link com.google.api.services.content.model.AccountShipping}
     * @return the request
     *//*
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountShipping content) throws java.io.IOException {
      Update result = new Update(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.AccountShipping> {

      private static final String REST_PATH = "{merchantId}/accountshipping/{accountId}";

      *//**
       * Updates the shipping settings of the account.
       *
       * Create a request for the method "accountshipping.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account for which to get/update account shipping settings.
       * @param content the {@link com.google.api.services.content.model.AccountShipping}
       * @since 1.13
       *//*
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountShipping content) {
        super(ShoppingContentBack.this, "PUT", REST_PATH, content, com.google.api.services.content.model.AccountShipping.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getAccountId(), "AccountShipping.getAccountId()");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account for which to get/update account shipping settings. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account for which to get/update account shipping settings.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account for which to get/update account shipping settings. *//*
      public Update setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Update setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * An accessor for creating requests from the Accountstatuses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Accountstatuses.List request = content.accountstatuses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
 /* public Accountstatuses accountstatuses() {
    return new Accountstatuses();
  }*/

  /**
   * The "accountstatuses" collection of methods.
   */
  /*public class Accountstatuses {

    *//**
     * Create a request for the method "accountstatuses.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.AccountstatusesCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.AccountstatusesCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.AccountstatusesCustomBatchResponse> {

      private static final String REST_PATH = "accountstatuses/batch";

      *//**
       * Create a request for the method "accountstatuses.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.AccountstatusesCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.AccountstatusesCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountstatusesCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves the status of a Merchant Center account.
     *
     * Create a request for the method "accountstatuses.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account.
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.AccountStatus> {

      private static final String REST_PATH = "{merchantId}/accountstatuses/{accountId}";

      *//**
       * Retrieves the status of a Merchant Center account.
       *
       * Create a request for the method "accountstatuses.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account.
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountStatus.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account. *//*
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the statuses of the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "accountstatuses.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.AccountstatusesListResponse> {

      private static final String REST_PATH = "{merchantId}/accountstatuses";

      *//**
       * Lists the statuses of the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "accountstatuses.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountstatusesListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** The maximum number of account statuses to return in the response, used for paging. *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of account statuses to return in the response, used for paging.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//** The maximum number of account statuses to return in the response, used for paging. *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * An accessor for creating requests from the Accounttax collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Accounttax.List request = content.accounttax().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
 /* public Accounttax accounttax() {
    return new Accounttax();
  }*/

  /**
   * The "accounttax" collection of methods.
   */
  /*public class Accounttax {

    *//**
     * Retrieves and updates tax settings of multiple accounts in a single request.
     *
     * Create a request for the method "accounttax.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.AccounttaxCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.AccounttaxCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.AccounttaxCustomBatchResponse> {

      private static final String REST_PATH = "accounttax/batch";

      *//**
       * Retrieves and updates tax settings of multiple accounts in a single request.
       *
       * Create a request for the method "accounttax.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.AccounttaxCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.AccounttaxCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccounttaxCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Custombatch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves the tax settings of the account.
     *
     * Create a request for the method "accounttax.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account for which to get/update account tax settings.
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.AccountTax> {

      private static final String REST_PATH = "{merchantId}/accounttax/{accountId}";

      *//**
       * Retrieves the tax settings of the account.
       *
       * Create a request for the method "accounttax.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account for which to get/update account tax settings.
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountTax.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account for which to get/update account tax settings. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account for which to get/update account tax settings.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account for which to get/update account tax settings. *//*
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the tax settings of the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "accounttax.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.AccounttaxListResponse> {

      private static final String REST_PATH = "{merchantId}/accounttax";

      *//**
       * Lists the tax settings of the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "accounttax.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccounttaxListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** The maximum number of tax settings to return in the response, used for paging. *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of tax settings to return in the response, used for paging.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//** The maximum number of tax settings to return in the response, used for paging. *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    *//**
     * Updates the tax settings of the account. This method supports patch semantics.
     *
     * Create a request for the method "accounttax.patch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account for which to get/update account tax settings.
     * @param content the {@link com.google.api.services.content.model.AccountTax}
     * @return the request
     *//*
    public Patch patch(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountTax content) throws java.io.IOException {
      Patch result = new Patch(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Patch extends ShoppingContentRequest<com.google.api.services.content.model.AccountTax> {

      private static final String REST_PATH = "{merchantId}/accounttax/{accountId}";

      *//**
       * Updates the tax settings of the account. This method supports patch semantics.
       *
       * Create a request for the method "accounttax.patch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account for which to get/update account tax settings.
       * @param content the {@link com.google.api.services.content.model.AccountTax}
       * @since 1.13
       *//*
      protected Patch(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountTax content) {
        super(ShoppingContentBack.this, "PATCH", REST_PATH, content, com.google.api.services.content.model.AccountTax.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Patch setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account for which to get/update account tax settings. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account for which to get/update account tax settings.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account for which to get/update account tax settings. *//*
      public Patch setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Patch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    *//**
     * Updates the tax settings of the account.
     *
     * Create a request for the method "accounttax.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account for which to get/update account tax settings.
     * @param content the {@link com.google.api.services.content.model.AccountTax}
     * @return the request
     *//*
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountTax content) throws java.io.IOException {
      Update result = new Update(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.AccountTax> {

      private static final String REST_PATH = "{merchantId}/accounttax/{accountId}";

      *//**
       * Updates the tax settings of the account.
       *
       * Create a request for the method "accounttax.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account for which to get/update account tax settings.
       * @param content the {@link com.google.api.services.content.model.AccountTax}
       * @since 1.13
       *//*
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountTax content) {
        super(ShoppingContentBack.this, "PUT", REST_PATH, content, com.google.api.services.content.model.AccountTax.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getAccountId(), "AccountTax.getAccountId()");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the account for which to get/update account tax settings. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      *//** The ID of the account for which to get/update account tax settings.
       *//*
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      *//** The ID of the account for which to get/update account tax settings. *//*
      public Update setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Update setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * An accessor for creating requests from the Datafeeds collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Datafeeds.List request = content.datafeeds().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  /*public Datafeeds datafeeds() {
    return new Datafeeds();
  }*/

  /**
   * The "datafeeds" collection of methods.
   */
  /*public class Datafeeds {

    *//**
     * Create a request for the method "datafeeds.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.DatafeedsCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.DatafeedsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedsCustomBatchResponse> {

      private static final String REST_PATH = "datafeeds/batch";

      *//**
       * Create a request for the method "datafeeds.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.DatafeedsCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.DatafeedsCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.DatafeedsCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Custombatch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Deletes a datafeed from your Merchant Center account.
     *
     * Create a request for the method "datafeeds.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId
     * @param datafeedId
     * @return the request
     *//*
    public Delete delete(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) throws java.io.IOException {
      Delete result = new Delete(merchantId, datafeedId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "{merchantId}/datafeeds/{datafeedId}";

      *//**
       * Deletes a datafeed from your Merchant Center account.
       *
       * Create a request for the method "datafeeds.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId
       * @param datafeedId
       * @since 1.13
       *//*
      protected Delete(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) {
        super(ShoppingContentBack.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//**

       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      *//**

       *//*
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      public Delete setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Delete setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves a datafeed from your Merchant Center account.
     *
     * Create a request for the method "datafeeds.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId
     * @param datafeedId
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) throws java.io.IOException {
      Get result = new Get(merchantId, datafeedId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Datafeed> {

      private static final String REST_PATH = "{merchantId}/datafeeds/{datafeedId}";

      *//**
       * Retrieves a datafeed from your Merchant Center account.
       *
       * Create a request for the method "datafeeds.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId
       * @param datafeedId
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.Datafeed.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//**

       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      *//**

       *//*
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      public Get setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Registers a datafeed with your Merchant Center account.
     *
     * Create a request for the method "datafeeds.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId
     * @param content the {@link com.google.api.services.content.model.Datafeed}
     * @return the request
     *//*
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Datafeed content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.Datafeed> {

      private static final String REST_PATH = "{merchantId}/datafeeds";

      *//**
       * Registers a datafeed with your Merchant Center account.
       *
       * Create a request for the method "datafeeds.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId
       * @param content the {@link com.google.api.services.content.model.Datafeed}
       * @since 1.13
       *//*
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Datafeed content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.Datafeed.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getContentLanguage(), "Datafeed.getContentLanguage()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getContentType(), "Datafeed.getContentType()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getFileName(), "Datafeed.getFileName()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getName(), "Datafeed.getName()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getTargetCountry(), "Datafeed.getTargetCountry()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//**

       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Insert setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the datafeeds in your Merchant Center account.
     *
     * Create a request for the method "datafeeds.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedsListResponse> {

      private static final String REST_PATH = "{merchantId}/datafeeds";

      *//**
       * Lists the datafeeds in your Merchant Center account.
       *
       * Create a request for the method "datafeeds.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.DatafeedsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** The maximum number of products to return in the response, used for paging. *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of products to return in the response, used for paging.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//** The maximum number of products to return in the response, used for paging. *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    *//**
     * Updates a datafeed of your Merchant Center account. This method supports patch semantics.
     *
     * Create a request for the method "datafeeds.patch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param merchantId
     * @param datafeedId
     * @param content the {@link com.google.api.services.content.model.Datafeed}
     * @return the request
     *//*
    public Patch patch(java.math.BigInteger merchantId, java.math.BigInteger datafeedId, com.google.api.services.content.model.Datafeed content) throws java.io.IOException {
      Patch result = new Patch(merchantId, datafeedId, content);
      initialize(result);
      return result;
    }

    public class Patch extends ShoppingContentRequest<com.google.api.services.content.model.Datafeed> {

      private static final String REST_PATH = "{merchantId}/datafeeds/{datafeedId}";

      *//**
       * Updates a datafeed of your Merchant Center account. This method supports patch semantics.
       *
       * Create a request for the method "datafeeds.patch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId
       * @param datafeedId
       * @param content the {@link com.google.api.services.content.model.Datafeed}
       * @since 1.13
       *//*
      protected Patch(java.math.BigInteger merchantId, java.math.BigInteger datafeedId, com.google.api.services.content.model.Datafeed content) {
        super(ShoppingContentBack.this, "PATCH", REST_PATH, content, com.google.api.services.content.model.Datafeed.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//**

       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      public Patch setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      *//**

       *//*
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      public Patch setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Patch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    *//**
     * Updates a datafeed of your Merchant Center account.
     *
     * Create a request for the method "datafeeds.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId
     * @param datafeedId
     * @param content the {@link com.google.api.services.content.model.Datafeed}
     * @return the request
     *//*
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger datafeedId, com.google.api.services.content.model.Datafeed content) throws java.io.IOException {
      Update result = new Update(merchantId, datafeedId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.Datafeed> {

      private static final String REST_PATH = "{merchantId}/datafeeds/{datafeedId}";

      *//**
       * Updates a datafeed of your Merchant Center account.
       *
       * Create a request for the method "datafeeds.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId
       * @param datafeedId
       * @param content the {@link com.google.api.services.content.model.Datafeed}
       * @since 1.13
       *//*
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger datafeedId, com.google.api.services.content.model.Datafeed content) {
        super(ShoppingContentBack.this, "PUT", REST_PATH, content, com.google.api.services.content.model.Datafeed.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getContentType(), "Datafeed.getContentType()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getFileName(), "Datafeed.getFileName()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getId(), "Datafeed.getId()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getTargetCountry(), "Datafeed.getTargetCountry()");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//**

       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      *//**

       *//*
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      public Update setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      *//** Flag to run the request in dry-run mode. *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      *//** Flag to run the request in dry-run mode.
       *//*
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      *//** Flag to run the request in dry-run mode. *//*
      public Update setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * An accessor for creating requests from the Datafeedstatuses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Datafeedstatuses.List request = content.datafeedstatuses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  /*public Datafeedstatuses datafeedstatuses() {
    return new Datafeedstatuses();
  }*/

  /**
   * The "datafeedstatuses" collection of methods.
   */
  /*public class Datafeedstatuses {

    *//**
     * Create a request for the method "datafeedstatuses.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedstatusesCustomBatchResponse> {

      private static final String REST_PATH = "datafeedstatuses/batch";

      *//**
       * Create a request for the method "datafeedstatuses.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.DatafeedstatusesCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves the status of a datafeed from your Merchant Center account.
     *
     * Create a request for the method "datafeedstatuses.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId
     * @param datafeedId
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) throws java.io.IOException {
      Get result = new Get(merchantId, datafeedId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedStatus> {

      private static final String REST_PATH = "{merchantId}/datafeedstatuses/{datafeedId}";

      *//**
       * Retrieves the status of a datafeed from your Merchant Center account.
       *
       * Create a request for the method "datafeedstatuses.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId
       * @param datafeedId
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.DatafeedStatus.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//**

       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      *//**

       *//*
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      public Get setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the statuses of the datafeeds in your Merchant Center account.
     *
     * Create a request for the method "datafeedstatuses.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedstatusesListResponse> {

      private static final String REST_PATH = "{merchantId}/datafeedstatuses";

      *//**
       * Lists the statuses of the datafeeds in your Merchant Center account.
       *
       * Create a request for the method "datafeedstatuses.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.DatafeedstatusesListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** The maximum number of products to return in the response, used for paging. *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of products to return in the response, used for paging.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//** The maximum number of products to return in the response, used for paging. *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * An accessor for creating requests from the Inventory collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Inventory.List request = content.inventory().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Inventory inventory() {
    return new Inventory();
  }

  /**
   * The "inventory" collection of methods.
   */
  public class Inventory {

    public Custombatch custombatch(com.google.api.services.content.model.InventoryCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequestBack<com.google.api.services.content.model.InventoryCustomBatchResponse> {

      private static final String REST_PATH = "inventory/batch";

    
      protected Custombatch(com.google.api.services.content.model.InventoryCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.InventoryCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

     
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

     
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      public Custombatch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    public Set set(java.math.BigInteger merchantId, java.lang.String storeCode, java.lang.String productId, com.google.api.services.content.model.InventorySetRequest content) throws java.io.IOException {
      Set result = new Set(merchantId, storeCode, productId, content);
      initialize(result);
      return result;
    }

    public class Set extends ShoppingContentRequestBack<com.google.api.services.content.model.InventorySetResponse> {

      private static final String REST_PATH = "{merchantId}/inventory/{storeCode}/products/{productId}";

      protected Set(java.math.BigInteger merchantId, java.lang.String storeCode, java.lang.String productId, com.google.api.services.content.model.InventorySetRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.InventorySetResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.storeCode = com.google.api.client.util.Preconditions.checkNotNull(storeCode, "Required parameter storeCode must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public Set setAlt(java.lang.String alt) {
        return (Set) super.setAlt(alt);
      }

      @Override
      public Set setFields(java.lang.String fields) {
        return (Set) super.setFields(fields);
      }

      @Override
      public Set setKey(java.lang.String key) {
        return (Set) super.setKey(key);
      }

      @Override
      public Set setOauthToken(java.lang.String oauthToken) {
        return (Set) super.setOauthToken(oauthToken);
      }

      @Override
      public Set setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Set) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Set setQuotaUser(java.lang.String quotaUser) {
        return (Set) super.setQuotaUser(quotaUser);
      }

      @Override
      public Set setUserIp(java.lang.String userIp) {
        return (Set) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      public Set setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String storeCode;

      public java.lang.String getStoreCode() {
        return storeCode;
      }

      public Set setStoreCode(java.lang.String storeCode) {
        this.storeCode = storeCode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String productId;

      public java.lang.String getProductId() {
        return productId;
      }

      public Set setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      public Set setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Set set(String parameterName, Object value) {
        return (Set) super.set(parameterName, value);
      }
    }

  }
  /**
   * An accessor for creating requests from the Orders collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Orders.List request = content.orders().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
 /* public Orders orders() {
    return new Orders();
  }*/

  /**
   * The "orders" collection of methods.
   */
/*  public class Orders {

    *//**
     * Marks an order as acknowledged.
     *
     * Create a request for the method "orders.acknowledge".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Acknowledge#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersAcknowledgeRequest}
     * @return the request
     *//*
    public Acknowledge acknowledge(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersAcknowledgeRequest content) throws java.io.IOException {
      Acknowledge result = new Acknowledge(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Acknowledge extends ShoppingContentRequest<com.google.api.services.content.model.OrdersAcknowledgeResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/acknowledge";

      *//**
       * Marks an order as acknowledged.
       *
       * Create a request for the method "orders.acknowledge".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Acknowledge#execute()} method to invoke the remote operation. <p>
       * {@link
       * Acknowledge#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersAcknowledgeRequest}
       * @since 1.13
       *//*
      protected Acknowledge(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersAcknowledgeRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersAcknowledgeResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Acknowledge setAlt(java.lang.String alt) {
        return (Acknowledge) super.setAlt(alt);
      }

      @Override
      public Acknowledge setFields(java.lang.String fields) {
        return (Acknowledge) super.setFields(fields);
      }

      @Override
      public Acknowledge setKey(java.lang.String key) {
        return (Acknowledge) super.setKey(key);
      }

      @Override
      public Acknowledge setOauthToken(java.lang.String oauthToken) {
        return (Acknowledge) super.setOauthToken(oauthToken);
      }

      @Override
      public Acknowledge setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Acknowledge) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Acknowledge setQuotaUser(java.lang.String quotaUser) {
        return (Acknowledge) super.setQuotaUser(quotaUser);
      }

      @Override
      public Acknowledge setUserIp(java.lang.String userIp) {
        return (Acknowledge) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Acknowledge setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order. *//*
      public Acknowledge setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Acknowledge set(String parameterName, Object value) {
        return (Acknowledge) super.set(parameterName, value);
      }
    }
    *//**
     * Sandbox only. Moves a test order from state "inProgress" to state "pendingShipment".
     *
     * Create a request for the method "orders.advancetestorder".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Advancetestorder#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the test order to modify.
     * @return the request
     *//*
    public Advancetestorder advancetestorder(java.math.BigInteger merchantId, java.lang.String orderId) throws java.io.IOException {
      Advancetestorder result = new Advancetestorder(merchantId, orderId);
      initialize(result);
      return result;
    }

    public class Advancetestorder extends ShoppingContentRequest<com.google.api.services.content.model.OrdersAdvanceTestOrderResponse> {

      private static final String REST_PATH = "{merchantId}/testorders/{orderId}/advance";

      *//**
       * Sandbox only. Moves a test order from state "inProgress" to state "pendingShipment".
       *
       * Create a request for the method "orders.advancetestorder".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Advancetestorder#execute()} method to invoke the remote operation.
       * <p> {@link Advancetestorder#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the test order to modify.
       * @since 1.13
       *//*
      protected Advancetestorder(java.math.BigInteger merchantId, java.lang.String orderId) {
        super(ShoppingContentBack.this, "POST", REST_PATH, null, com.google.api.services.content.model.OrdersAdvanceTestOrderResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Advancetestorder setAlt(java.lang.String alt) {
        return (Advancetestorder) super.setAlt(alt);
      }

      @Override
      public Advancetestorder setFields(java.lang.String fields) {
        return (Advancetestorder) super.setFields(fields);
      }

      @Override
      public Advancetestorder setKey(java.lang.String key) {
        return (Advancetestorder) super.setKey(key);
      }

      @Override
      public Advancetestorder setOauthToken(java.lang.String oauthToken) {
        return (Advancetestorder) super.setOauthToken(oauthToken);
      }

      @Override
      public Advancetestorder setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Advancetestorder) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Advancetestorder setQuotaUser(java.lang.String quotaUser) {
        return (Advancetestorder) super.setQuotaUser(quotaUser);
      }

      @Override
      public Advancetestorder setUserIp(java.lang.String userIp) {
        return (Advancetestorder) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Advancetestorder setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the test order to modify. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the test order to modify.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the test order to modify. *//*
      public Advancetestorder setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Advancetestorder set(String parameterName, Object value) {
        return (Advancetestorder) super.set(parameterName, value);
      }
    }
    *//**
     * Cancels all line items in an order.
     *
     * Create a request for the method "orders.cancel".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order to cancel.
     * @param content the {@link com.google.api.services.content.model.OrdersCancelRequest}
     * @return the request
     *//*
    public Cancel cancel(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelRequest content) throws java.io.IOException {
      Cancel result = new Cancel(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Cancel extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCancelResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/cancel";

      *//**
       * Cancels all line items in an order.
       *
       * Create a request for the method "orders.cancel".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Cancel#execute()} method to invoke the remote operation. <p> {@link
       * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order to cancel.
       * @param content the {@link com.google.api.services.content.model.OrdersCancelRequest}
       * @since 1.13
       *//*
      protected Cancel(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCancelResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Cancel setAlt(java.lang.String alt) {
        return (Cancel) super.setAlt(alt);
      }

      @Override
      public Cancel setFields(java.lang.String fields) {
        return (Cancel) super.setFields(fields);
      }

      @Override
      public Cancel setKey(java.lang.String key) {
        return (Cancel) super.setKey(key);
      }

      @Override
      public Cancel setOauthToken(java.lang.String oauthToken) {
        return (Cancel) super.setOauthToken(oauthToken);
      }

      @Override
      public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Cancel) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Cancel setQuotaUser(java.lang.String quotaUser) {
        return (Cancel) super.setQuotaUser(quotaUser);
      }

      @Override
      public Cancel setUserIp(java.lang.String userIp) {
        return (Cancel) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Cancel setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order to cancel. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order to cancel.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order to cancel. *//*
      public Cancel setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Cancel set(String parameterName, Object value) {
        return (Cancel) super.set(parameterName, value);
      }
    }
    *//**
     * Cancels a line item.
     *
     * Create a request for the method "orders.cancellineitem".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Cancellineitem#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersCancelLineItemRequest}
     * @return the request
     *//*
    public Cancellineitem cancellineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelLineItemRequest content) throws java.io.IOException {
      Cancellineitem result = new Cancellineitem(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Cancellineitem extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCancelLineItemResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/cancelLineItem";

      *//**
       * Cancels a line item.
       *
       * Create a request for the method "orders.cancellineitem".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Cancellineitem#execute()} method to invoke the remote operation.
       * <p> {@link Cancellineitem#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersCancelLineItemRequest}
       * @since 1.13
       *//*
      protected Cancellineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelLineItemRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCancelLineItemResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Cancellineitem setAlt(java.lang.String alt) {
        return (Cancellineitem) super.setAlt(alt);
      }

      @Override
      public Cancellineitem setFields(java.lang.String fields) {
        return (Cancellineitem) super.setFields(fields);
      }

      @Override
      public Cancellineitem setKey(java.lang.String key) {
        return (Cancellineitem) super.setKey(key);
      }

      @Override
      public Cancellineitem setOauthToken(java.lang.String oauthToken) {
        return (Cancellineitem) super.setOauthToken(oauthToken);
      }

      @Override
      public Cancellineitem setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Cancellineitem) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Cancellineitem setQuotaUser(java.lang.String quotaUser) {
        return (Cancellineitem) super.setQuotaUser(quotaUser);
      }

      @Override
      public Cancellineitem setUserIp(java.lang.String userIp) {
        return (Cancellineitem) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Cancellineitem setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order. *//*
      public Cancellineitem setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Cancellineitem set(String parameterName, Object value) {
        return (Cancellineitem) super.set(parameterName, value);
      }
    }
    *//**
     * Sandbox only. Creates a test order.
     *
     * Create a request for the method "orders.createtestorder".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Createtestorder#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param content the {@link com.google.api.services.content.model.OrdersCreateTestOrderRequest}
     * @return the request
     *//*
    public Createtestorder createtestorder(java.math.BigInteger merchantId, com.google.api.services.content.model.OrdersCreateTestOrderRequest content) throws java.io.IOException {
      Createtestorder result = new Createtestorder(merchantId, content);
      initialize(result);
      return result;
    }

    public class Createtestorder extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCreateTestOrderResponse> {

      private static final String REST_PATH = "{merchantId}/testorders";

      *//**
       * Sandbox only. Creates a test order.
       *
       * Create a request for the method "orders.createtestorder".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Createtestorder#execute()} method to invoke the remote operation.
       * <p> {@link Createtestorder#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param content the {@link com.google.api.services.content.model.OrdersCreateTestOrderRequest}
       * @since 1.13
       *//*
      protected Createtestorder(java.math.BigInteger merchantId, com.google.api.services.content.model.OrdersCreateTestOrderRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCreateTestOrderResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Createtestorder setAlt(java.lang.String alt) {
        return (Createtestorder) super.setAlt(alt);
      }

      @Override
      public Createtestorder setFields(java.lang.String fields) {
        return (Createtestorder) super.setFields(fields);
      }

      @Override
      public Createtestorder setKey(java.lang.String key) {
        return (Createtestorder) super.setKey(key);
      }

      @Override
      public Createtestorder setOauthToken(java.lang.String oauthToken) {
        return (Createtestorder) super.setOauthToken(oauthToken);
      }

      @Override
      public Createtestorder setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Createtestorder) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Createtestorder setQuotaUser(java.lang.String quotaUser) {
        return (Createtestorder) super.setQuotaUser(quotaUser);
      }

      @Override
      public Createtestorder setUserIp(java.lang.String userIp) {
        return (Createtestorder) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Createtestorder setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Createtestorder set(String parameterName, Object value) {
        return (Createtestorder) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves or modifies multiple orders in a single request.
     *
     * Create a request for the method "orders.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.OrdersCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.OrdersCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCustomBatchResponse> {

      private static final String REST_PATH = "orders/batch";

      *//**
       * Retrieves or modifies multiple orders in a single request.
       *
       * Create a request for the method "orders.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.OrdersCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.OrdersCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves an order from your Merchant Center account.
     *
     * Create a request for the method "orders.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order.
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.lang.String orderId) throws java.io.IOException {
      Get result = new Get(merchantId, orderId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Order> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}";

      *//**
       * Retrieves an order from your Merchant Center account.
       *
       * Create a request for the method "orders.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order.
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.lang.String orderId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.Order.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order. *//*
      public Get setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Retrieves an order using merchant order id.
     *
     * Create a request for the method "orders.getbymerchantorderid".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Getbymerchantorderid#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the managing account.
     * @param merchantOrderId The merchant order id to be looked for.
     * @return the request
     *//*
    public Getbymerchantorderid getbymerchantorderid(java.math.BigInteger merchantId, java.lang.String merchantOrderId) throws java.io.IOException {
      Getbymerchantorderid result = new Getbymerchantorderid(merchantId, merchantOrderId);
      initialize(result);
      return result;
    }

    public class Getbymerchantorderid extends ShoppingContentRequest<com.google.api.services.content.model.OrdersGetByMerchantOrderIdResponse> {

      private static final String REST_PATH = "{merchantId}/ordersbymerchantid/{merchantOrderId}";

      *//**
       * Retrieves an order using merchant order id.
       *
       * Create a request for the method "orders.getbymerchantorderid".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Getbymerchantorderid#execute()} method to invoke the remote
       * operation. <p> {@link Getbymerchantorderid#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param merchantOrderId The merchant order id to be looked for.
       * @since 1.13
       *//*
      protected Getbymerchantorderid(java.math.BigInteger merchantId, java.lang.String merchantOrderId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrdersGetByMerchantOrderIdResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.merchantOrderId = com.google.api.client.util.Preconditions.checkNotNull(merchantOrderId, "Required parameter merchantOrderId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getbymerchantorderid setAlt(java.lang.String alt) {
        return (Getbymerchantorderid) super.setAlt(alt);
      }

      @Override
      public Getbymerchantorderid setFields(java.lang.String fields) {
        return (Getbymerchantorderid) super.setFields(fields);
      }

      @Override
      public Getbymerchantorderid setKey(java.lang.String key) {
        return (Getbymerchantorderid) super.setKey(key);
      }

      @Override
      public Getbymerchantorderid setOauthToken(java.lang.String oauthToken) {
        return (Getbymerchantorderid) super.setOauthToken(oauthToken);
      }

      @Override
      public Getbymerchantorderid setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getbymerchantorderid) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getbymerchantorderid setQuotaUser(java.lang.String quotaUser) {
        return (Getbymerchantorderid) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getbymerchantorderid setUserIp(java.lang.String userIp) {
        return (Getbymerchantorderid) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Getbymerchantorderid setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The merchant order id to be looked for. *//*
      @com.google.api.client.util.Key
      private java.lang.String merchantOrderId;

      *//** The merchant order id to be looked for.
       *//*
      public java.lang.String getMerchantOrderId() {
        return merchantOrderId;
      }

      *//** The merchant order id to be looked for. *//*
      public Getbymerchantorderid setMerchantOrderId(java.lang.String merchantOrderId) {
        this.merchantOrderId = merchantOrderId;
        return this;
      }

      @Override
      public Getbymerchantorderid set(String parameterName, Object value) {
        return (Getbymerchantorderid) super.set(parameterName, value);
      }
    }
    *//**
     * Sandbox only. Retrieves an order template that can be used to quickly create a new order in
     * sandbox.
     *
     * Create a request for the method "orders.gettestordertemplate".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Gettestordertemplate#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the managing account.
     * @param templateName The name of the template to retrieve.
     * @return the request
     *//*
    public Gettestordertemplate gettestordertemplate(java.math.BigInteger merchantId, java.lang.String templateName) throws java.io.IOException {
      Gettestordertemplate result = new Gettestordertemplate(merchantId, templateName);
      initialize(result);
      return result;
    }

    public class Gettestordertemplate extends ShoppingContentRequest<com.google.api.services.content.model.OrdersGetTestOrderTemplateResponse> {

      private static final String REST_PATH = "{merchantId}/testordertemplates/{templateName}";

      *//**
       * Sandbox only. Retrieves an order template that can be used to quickly create a new order in
       * sandbox.
       *
       * Create a request for the method "orders.gettestordertemplate".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Gettestordertemplate#execute()} method to invoke the remote
       * operation. <p> {@link Gettestordertemplate#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param templateName The name of the template to retrieve.
       * @since 1.13
       *//*
      protected Gettestordertemplate(java.math.BigInteger merchantId, java.lang.String templateName) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrdersGetTestOrderTemplateResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.templateName = com.google.api.client.util.Preconditions.checkNotNull(templateName, "Required parameter templateName must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Gettestordertemplate setAlt(java.lang.String alt) {
        return (Gettestordertemplate) super.setAlt(alt);
      }

      @Override
      public Gettestordertemplate setFields(java.lang.String fields) {
        return (Gettestordertemplate) super.setFields(fields);
      }

      @Override
      public Gettestordertemplate setKey(java.lang.String key) {
        return (Gettestordertemplate) super.setKey(key);
      }

      @Override
      public Gettestordertemplate setOauthToken(java.lang.String oauthToken) {
        return (Gettestordertemplate) super.setOauthToken(oauthToken);
      }

      @Override
      public Gettestordertemplate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Gettestordertemplate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Gettestordertemplate setQuotaUser(java.lang.String quotaUser) {
        return (Gettestordertemplate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Gettestordertemplate setUserIp(java.lang.String userIp) {
        return (Gettestordertemplate) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Gettestordertemplate setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The name of the template to retrieve. *//*
      @com.google.api.client.util.Key
      private java.lang.String templateName;

      *//** The name of the template to retrieve.
       *//*
      public java.lang.String getTemplateName() {
        return templateName;
      }

      *//** The name of the template to retrieve. *//*
      public Gettestordertemplate setTemplateName(java.lang.String templateName) {
        this.templateName = templateName;
        return this;
      }

      @Override
      public Gettestordertemplate set(String parameterName, Object value) {
        return (Gettestordertemplate) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the orders in your Merchant Center account.
     *
     * Create a request for the method "orders.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.OrdersListResponse> {

      private static final String REST_PATH = "{merchantId}/orders";

      *//**
       * Lists the orders in your Merchant Center account.
       *
       * Create a request for the method "orders.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrdersListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//**
       * The ordering of the returned list. The only supported value are placedDate desc and
       * placedDate asc for now, which returns orders sorted by placement date. "placedDate desc"
       * stands for listing orders by placement date, from oldest to most recent. "placedDate asc"
       * stands for listing orders by placement date, from most recent to oldest. In future releases
       * we'll support other sorting criteria.
       *//*
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      *//** The ordering of the returned list. The only supported value are placedDate desc and placedDate asc
     for now, which returns orders sorted by placement date. "placedDate desc" stands for listing orders
     by placement date, from oldest to most recent. "placedDate asc" stands for listing orders by
     placement date, from most recent to oldest. In future releases we'll support other sorting
     criteria.
       *//*
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      *//**
       * The ordering of the returned list. The only supported value are placedDate desc and
       * placedDate asc for now, which returns orders sorted by placement date. "placedDate desc"
       * stands for listing orders by placement date, from oldest to most recent. "placedDate asc"
       * stands for listing orders by placement date, from most recent to oldest. In future releases
       * we'll support other sorting criteria.
       *//*
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      *//** Obtains orders placed before this date (exclusively), in ISO 8601 format. *//*
      @com.google.api.client.util.Key
      private java.lang.String placedDateEnd;

      *//** Obtains orders placed before this date (exclusively), in ISO 8601 format.
       *//*
      public java.lang.String getPlacedDateEnd() {
        return placedDateEnd;
      }

      *//** Obtains orders placed before this date (exclusively), in ISO 8601 format. *//*
      public List setPlacedDateEnd(java.lang.String placedDateEnd) {
        this.placedDateEnd = placedDateEnd;
        return this;
      }

      *//**
       * Obtains orders that match the acknowledgement status. When set to true, obtains orders that
       * have been acknowledged. When false, obtains orders that have not been acknowledged. We
       * recommend using this filter set to false, in conjunction with the acknowledge call, such
       * that only un-acknowledged orders are returned.
       *//*
      @com.google.api.client.util.Key
      private java.lang.Boolean acknowledged;

      *//** Obtains orders that match the acknowledgement status. When set to true, obtains orders that have
     been acknowledged. When false, obtains orders that have not been acknowledged. We recommend using
     this filter set to false, in conjunction with the acknowledge call, such that only un-acknowledged
     orders are returned.
       *//*
      public java.lang.Boolean getAcknowledged() {
        return acknowledged;
      }

      *//**
       * Obtains orders that match the acknowledgement status. When set to true, obtains orders that
       * have been acknowledged. When false, obtains orders that have not been acknowledged. We
       * recommend using this filter set to false, in conjunction with the acknowledge call, such
       * that only un-acknowledged orders are returned.
       *//*
      public List setAcknowledged(java.lang.Boolean acknowledged) {
        this.acknowledged = acknowledged;
        return this;
      }

      *//**
       * The maximum number of orders to return in the response, used for paging. The default value
       * is 25 orders per page, and the maximum allowed value is 250 orders per page. Known issue:
       * All List calls will return all Orders without limit regardless of the value of this field.
       *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of orders to return in the response, used for paging. The default value is 25
     orders per page, and the maximum allowed value is 250 orders per page. Known issue: All List calls
     will return all Orders without limit regardless of the value of this field.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//**
       * The maximum number of orders to return in the response, used for paging. The default value
       * is 25 orders per page, and the maximum allowed value is 250 orders per page. Known issue:
       * All List calls will return all Orders without limit regardless of the value of this field.
       *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** Obtains orders placed after this date (inclusively), in ISO 8601 format. *//*
      @com.google.api.client.util.Key
      private java.lang.String placedDateStart;

      *//** Obtains orders placed after this date (inclusively), in ISO 8601 format.
       *//*
      public java.lang.String getPlacedDateStart() {
        return placedDateStart;
      }

      *//** Obtains orders placed after this date (inclusively), in ISO 8601 format. *//*
      public List setPlacedDateStart(java.lang.String placedDateStart) {
        this.placedDateStart = placedDateStart;
        return this;
      }

      *//**
       * Obtains orders that match any of the specified statuses. Multiple values can be specified
       * with comma separation. Additionally, please note that active is a shortcut for
       * pendingShipment and partiallyShipped, and completed is a shortcut for shipped ,
       * partiallyDelivered, delivered, partiallyReturned, returned, and canceled.
       *//*
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> statuses;

      *//** Obtains orders that match any of the specified statuses. Multiple values can be specified with
     comma separation. Additionally, please note that active is a shortcut for pendingShipment and
     partiallyShipped, and completed is a shortcut for shipped , partiallyDelivered, delivered,
     partiallyReturned, returned, and canceled.
       *//*
      public java.util.List<java.lang.String> getStatuses() {
        return statuses;
      }

      *//**
       * Obtains orders that match any of the specified statuses. Multiple values can be specified
       * with comma separation. Additionally, please note that active is a shortcut for
       * pendingShipment and partiallyShipped, and completed is a shortcut for shipped ,
       * partiallyDelivered, delivered, partiallyReturned, returned, and canceled.
       *//*
      public List setStatuses(java.util.List<java.lang.String> statuses) {
        this.statuses = statuses;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    *//**
     * Refund a portion of the order, up to the full amount paid.
     *
     * Create a request for the method "orders.refund".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Refund#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order to refund.
     * @param content the {@link com.google.api.services.content.model.OrdersRefundRequest}
     * @return the request
     *//*
    public Refund refund(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRefundRequest content) throws java.io.IOException {
      Refund result = new Refund(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Refund extends ShoppingContentRequest<com.google.api.services.content.model.OrdersRefundResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/refund";

      *//**
       * Refund a portion of the order, up to the full amount paid.
       *
       * Create a request for the method "orders.refund".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Refund#execute()} method to invoke the remote operation. <p> {@link
       * Refund#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order to refund.
       * @param content the {@link com.google.api.services.content.model.OrdersRefundRequest}
       * @since 1.13
       *//*
      protected Refund(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRefundRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersRefundResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Refund setAlt(java.lang.String alt) {
        return (Refund) super.setAlt(alt);
      }

      @Override
      public Refund setFields(java.lang.String fields) {
        return (Refund) super.setFields(fields);
      }

      @Override
      public Refund setKey(java.lang.String key) {
        return (Refund) super.setKey(key);
      }

      @Override
      public Refund setOauthToken(java.lang.String oauthToken) {
        return (Refund) super.setOauthToken(oauthToken);
      }

      @Override
      public Refund setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Refund) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Refund setQuotaUser(java.lang.String quotaUser) {
        return (Refund) super.setQuotaUser(quotaUser);
      }

      @Override
      public Refund setUserIp(java.lang.String userIp) {
        return (Refund) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Refund setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order to refund. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order to refund.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order to refund. *//*
      public Refund setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Refund set(String parameterName, Object value) {
        return (Refund) super.set(parameterName, value);
      }
    }
    *//**
     * Returns a line item.
     *
     * Create a request for the method "orders.returnlineitem".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Returnlineitem#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersReturnLineItemRequest}
     * @return the request
     *//*
    public Returnlineitem returnlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersReturnLineItemRequest content) throws java.io.IOException {
      Returnlineitem result = new Returnlineitem(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Returnlineitem extends ShoppingContentRequest<com.google.api.services.content.model.OrdersReturnLineItemResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/returnLineItem";

      *//**
       * Returns a line item.
       *
       * Create a request for the method "orders.returnlineitem".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Returnlineitem#execute()} method to invoke the remote operation.
       * <p> {@link Returnlineitem#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersReturnLineItemRequest}
       * @since 1.13
       *//*
      protected Returnlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersReturnLineItemRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersReturnLineItemResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Returnlineitem setAlt(java.lang.String alt) {
        return (Returnlineitem) super.setAlt(alt);
      }

      @Override
      public Returnlineitem setFields(java.lang.String fields) {
        return (Returnlineitem) super.setFields(fields);
      }

      @Override
      public Returnlineitem setKey(java.lang.String key) {
        return (Returnlineitem) super.setKey(key);
      }

      @Override
      public Returnlineitem setOauthToken(java.lang.String oauthToken) {
        return (Returnlineitem) super.setOauthToken(oauthToken);
      }

      @Override
      public Returnlineitem setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Returnlineitem) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Returnlineitem setQuotaUser(java.lang.String quotaUser) {
        return (Returnlineitem) super.setQuotaUser(quotaUser);
      }

      @Override
      public Returnlineitem setUserIp(java.lang.String userIp) {
        return (Returnlineitem) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Returnlineitem setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order. *//*
      public Returnlineitem setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Returnlineitem set(String parameterName, Object value) {
        return (Returnlineitem) super.set(parameterName, value);
      }
    }
    *//**
     * Marks line item(s) as shipped.
     *
     * Create a request for the method "orders.shiplineitems".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Shiplineitems#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersShipLineItemsRequest}
     * @return the request
     *//*
    public Shiplineitems shiplineitems(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersShipLineItemsRequest content) throws java.io.IOException {
      Shiplineitems result = new Shiplineitems(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Shiplineitems extends ShoppingContentRequest<com.google.api.services.content.model.OrdersShipLineItemsResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/shipLineItems";

      *//**
       * Marks line item(s) as shipped.
       *
       * Create a request for the method "orders.shiplineitems".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Shiplineitems#execute()} method to invoke the remote operation. <p>
       * {@link Shiplineitems#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersShipLineItemsRequest}
       * @since 1.13
       *//*
      protected Shiplineitems(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersShipLineItemsRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersShipLineItemsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Shiplineitems setAlt(java.lang.String alt) {
        return (Shiplineitems) super.setAlt(alt);
      }

      @Override
      public Shiplineitems setFields(java.lang.String fields) {
        return (Shiplineitems) super.setFields(fields);
      }

      @Override
      public Shiplineitems setKey(java.lang.String key) {
        return (Shiplineitems) super.setKey(key);
      }

      @Override
      public Shiplineitems setOauthToken(java.lang.String oauthToken) {
        return (Shiplineitems) super.setOauthToken(oauthToken);
      }

      @Override
      public Shiplineitems setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Shiplineitems) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Shiplineitems setQuotaUser(java.lang.String quotaUser) {
        return (Shiplineitems) super.setQuotaUser(quotaUser);
      }

      @Override
      public Shiplineitems setUserIp(java.lang.String userIp) {
        return (Shiplineitems) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Shiplineitems setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order. *//*
      public Shiplineitems setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Shiplineitems set(String parameterName, Object value) {
        return (Shiplineitems) super.set(parameterName, value);
      }
    }
    *//**
     * Updates the merchant order ID for a given order.
     *
     * Create a request for the method "orders.updatemerchantorderid".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Updatemerchantorderid#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest}
     * @return the request
     *//*
    public Updatemerchantorderid updatemerchantorderid(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest content) throws java.io.IOException {
      Updatemerchantorderid result = new Updatemerchantorderid(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Updatemerchantorderid extends ShoppingContentRequest<com.google.api.services.content.model.OrdersUpdateMerchantOrderIdResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/updateMerchantOrderId";

      *//**
       * Updates the merchant order ID for a given order.
       *
       * Create a request for the method "orders.updatemerchantorderid".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Updatemerchantorderid#execute()} method to invoke the remote
       * operation. <p> {@link Updatemerchantorderid#initialize(com.google.api.client.googleapis.service
       * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest}
       * @since 1.13
       *//*
      protected Updatemerchantorderid(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersUpdateMerchantOrderIdResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Updatemerchantorderid setAlt(java.lang.String alt) {
        return (Updatemerchantorderid) super.setAlt(alt);
      }

      @Override
      public Updatemerchantorderid setFields(java.lang.String fields) {
        return (Updatemerchantorderid) super.setFields(fields);
      }

      @Override
      public Updatemerchantorderid setKey(java.lang.String key) {
        return (Updatemerchantorderid) super.setKey(key);
      }

      @Override
      public Updatemerchantorderid setOauthToken(java.lang.String oauthToken) {
        return (Updatemerchantorderid) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatemerchantorderid setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatemerchantorderid) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatemerchantorderid setQuotaUser(java.lang.String quotaUser) {
        return (Updatemerchantorderid) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatemerchantorderid setUserIp(java.lang.String userIp) {
        return (Updatemerchantorderid) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Updatemerchantorderid setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order. *//*
      public Updatemerchantorderid setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Updatemerchantorderid set(String parameterName, Object value) {
        return (Updatemerchantorderid) super.set(parameterName, value);
      }
    }
    *//**
     * Updates a shipment's status, carrier, and/or tracking ID.
     *
     * Create a request for the method "orders.updateshipment".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Updateshipment#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersUpdateShipmentRequest}
     * @return the request
     *//*
    public Updateshipment updateshipment(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateShipmentRequest content) throws java.io.IOException {
      Updateshipment result = new Updateshipment(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Updateshipment extends ShoppingContentRequest<com.google.api.services.content.model.OrdersUpdateShipmentResponse> {

      private static final String REST_PATH = "{merchantId}/orders/{orderId}/updateShipment";

      *//**
       * Updates a shipment's status, carrier, and/or tracking ID.
       *
       * Create a request for the method "orders.updateshipment".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Updateshipment#execute()} method to invoke the remote operation.
       * <p> {@link Updateshipment#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersUpdateShipmentRequest}
       * @since 1.13
       *//*
      protected Updateshipment(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateShipmentRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersUpdateShipmentResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Updateshipment setAlt(java.lang.String alt) {
        return (Updateshipment) super.setAlt(alt);
      }

      @Override
      public Updateshipment setFields(java.lang.String fields) {
        return (Updateshipment) super.setFields(fields);
      }

      @Override
      public Updateshipment setKey(java.lang.String key) {
        return (Updateshipment) super.setKey(key);
      }

      @Override
      public Updateshipment setOauthToken(java.lang.String oauthToken) {
        return (Updateshipment) super.setOauthToken(oauthToken);
      }

      @Override
      public Updateshipment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updateshipment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updateshipment setQuotaUser(java.lang.String quotaUser) {
        return (Updateshipment) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updateshipment setUserIp(java.lang.String userIp) {
        return (Updateshipment) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Updateshipment setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the order. *//*
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      *//** The ID of the order.
       *//*
      public java.lang.String getOrderId() {
        return orderId;
      }

      *//** The ID of the order. *//*
      public Updateshipment setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Updateshipment set(String parameterName, Object value) {
        return (Updateshipment) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * An accessor for creating requests from the Products collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Products.List request = content.products().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Products products() {
    return new Products();
  }

  /**
   * The "products" collection of methods.
   */
  public class Products {

    /**
     * Retrieves, inserts, and deletes multiple products in a single request.
     *
     * Create a request for the method "products.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.ProductsCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.ProductsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequestBack<com.google.api.services.content.model.ProductsCustomBatchResponse> {

      private static final String REST_PATH = "products/batch";

      /**
       * Retrieves, inserts, and deletes multiple products in a single request.
       *
       * Create a request for the method "products.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.ProductsCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.ProductsCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.ProductsCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      /** Flag to run the request in dry-run mode. */
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      /** Flag to run the request in dry-run mode.
       */
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      /** Flag to run the request in dry-run mode. */
      public Custombatch setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a product from your Merchant Center account.
     *
     * Create a request for the method "products.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param productId The ID of the product.
     * @return the request
     */
    public Delete delete(java.math.BigInteger merchantId, java.lang.String productId) throws java.io.IOException {
      Delete result = new Delete(merchantId, productId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequestBack<Void> {

      private static final String REST_PATH = "{merchantId}/products/{productId}";

      /**
       * Deletes a product from your Merchant Center account.
       *
       * Create a request for the method "products.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param productId The ID of the product.
       * @since 1.13
       */
      protected Delete(java.math.BigInteger merchantId, java.lang.String productId) {
        super(ShoppingContentBack.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the managing account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. */
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the product. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The ID of the product.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The ID of the product. */
      public Delete setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      /** Flag to run the request in dry-run mode. */
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      /** Flag to run the request in dry-run mode.
       */
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      /** Flag to run the request in dry-run mode. */
      public Delete setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a product from your Merchant Center account.
     *
     * Create a request for the method "products.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param productId The ID of the product.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String productId) throws java.io.IOException {
      Get result = new Get(merchantId, productId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequestBack<com.google.api.services.content.model.Product> {

      private static final String REST_PATH = "{merchantId}/products/{productId}";

      /**
       * Retrieves a product from your Merchant Center account.
       *
       * Create a request for the method "products.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param productId The ID of the product.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String productId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.Product.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the managing account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the product. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The ID of the product.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The ID of the product. */
      public Get setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Uploads a product to your Merchant Center account.
     *
     * Create a request for the method "products.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param content the {@link com.google.api.services.content.model.Product}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Product content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequestBack<com.google.api.services.content.model.Product> {

      private static final String REST_PATH = "{merchantId}/products";

      /**
       * Uploads a product to your Merchant Center account.
       *
       * Create a request for the method "products.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param content the {@link com.google.api.services.content.model.Product}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Product content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.Product.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getChannel(), "Product.getChannel()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getContentLanguage(), "Product.getContentLanguage()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getOfferId(), "Product.getOfferId()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getTargetCountry(), "Product.getTargetCountry()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The ID of the managing account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Flag to run the request in dry-run mode. */
      @com.google.api.client.util.Key
      private java.lang.Boolean dryRun;

      /** Flag to run the request in dry-run mode.
       */
      public java.lang.Boolean getDryRun() {
        return dryRun;
      }

      /** Flag to run the request in dry-run mode. */
      public Insert setDryRun(java.lang.Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Lists the products in your Merchant Center account.
     *
     * Create a request for the method "products.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequestBack<com.google.api.services.content.model.ProductsListResponse> {

      private static final String REST_PATH = "{merchantId}/products";

      /**
       * Lists the products in your Merchant Center account.
       *
       * Create a request for the method "products.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.ProductsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The ID of the managing account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** The maximum number of products to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of products to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of products to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Productstatuses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Productstatuses.List request = content.productstatuses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  /*public Productstatuses productstatuses() {
    return new Productstatuses();
  }*/

  /**
   * The "productstatuses" collection of methods.
   */
  /*public class Productstatuses {

    *//**
     * Gets the statuses of multiple products in a single request.
     *
     * Create a request for the method "productstatuses.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.ProductstatusesCustomBatchRequest}
     * @return the request
     *//*
    public Custombatch custombatch(com.google.api.services.content.model.ProductstatusesCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.ProductstatusesCustomBatchResponse> {

      private static final String REST_PATH = "productstatuses/batch";

      *//**
       * Gets the statuses of multiple products in a single request.
       *
       * Create a request for the method "productstatuses.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.ProductstatusesCustomBatchRequest}
       * @since 1.13
       *//*
      protected Custombatch(com.google.api.services.content.model.ProductstatusesCustomBatchRequest content) {
        super(ShoppingContentBack.this, "POST", REST_PATH, content, com.google.api.services.content.model.ProductstatusesCustomBatchResponse.class);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUserIp(java.lang.String userIp) {
        return (Custombatch) super.setUserIp(userIp);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    *//**
     * Gets the status of a product from your Merchant Center account.
     *
     * Create a request for the method "productstatuses.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param productId The ID of the product.
     * @return the request
     *//*
    public Get get(java.math.BigInteger merchantId, java.lang.String productId) throws java.io.IOException {
      Get result = new Get(merchantId, productId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.ProductStatus> {

      private static final String REST_PATH = "{merchantId}/productstatuses/{productId}";

      *//**
       * Gets the status of a product from your Merchant Center account.
       *
       * Create a request for the method "productstatuses.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param productId The ID of the product.
       * @since 1.13
       *//*
      protected Get(java.math.BigInteger merchantId, java.lang.String productId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.ProductStatus.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The ID of the product. *//*
      @com.google.api.client.util.Key
      private java.lang.String productId;

      *//** The ID of the product.
       *//*
      public java.lang.String getProductId() {
        return productId;
      }

      *//** The ID of the product. *//*
      public Get setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    *//**
     * Lists the statuses of the products in your Merchant Center account.
     *
     * Create a request for the method "productstatuses.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @return the request
     *//*
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ProductstatusesListResponse> {

      private static final String REST_PATH = "{merchantId}/productstatuses";

      *//**
       * Lists the statuses of the products in your Merchant Center account.
       *
       * Create a request for the method "productstatuses.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @since 1.13
       *//*
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContentBack.this, "GET", REST_PATH, null, com.google.api.services.content.model.ProductstatusesListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      *//** The ID of the managing account. *//*
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      *//** The ID of the managing account.
       *//*
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      *//** The ID of the managing account. *//*
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      *//** The token returned by the previous request. *//*
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      *//** The token returned by the previous request.
       *//*
      public java.lang.String getPageToken() {
        return pageToken;
      }

      *//** The token returned by the previous request. *//*
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      *//** The maximum number of product statuses to return in the response, used for paging. *//*
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      *//** The maximum number of product statuses to return in the response, used for paging.
       *//*
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      *//** The maximum number of product statuses to return in the response, used for paging. *//*
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }
*/
  /**
   * Builder for {@link ShoppingContent}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends AbstractGoogleJsonClientBack.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link ShoppingContent}. */
    @Override
    public ShoppingContentBack build() {
      return new ShoppingContentBack(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ShoppingContentRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setShoppingContentRequestInitializer(
        ShoppingContentRequestInitializerBack shoppingcontentRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(shoppingcontentRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        GoogleClientRequestInitializerBack googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
